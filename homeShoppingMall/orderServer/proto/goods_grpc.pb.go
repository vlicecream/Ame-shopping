// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoodsServerClient is the client API for GoodsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsServerClient interface {
	// 商品详情接口
	GetClassifyGoods(ctx context.Context, in *ClassifyGoodsInfoRequest, opts ...grpc.CallOption) (*GoodsListResponse, error)
	BatchGetGoods(ctx context.Context, in *BathGoodsNameInfoRequest, opts ...grpc.CallOption) (*GoodsListResponse, error)
	CreateGoodsInfo(ctx context.Context, in *GoodsCreateInfoRequest, opts ...grpc.CallOption) (*GoodsInfoResponse, error)
	UpdateGoodsInfo(ctx context.Context, in *GoodsCreateInfoRequest, opts ...grpc.CallOption) (*GoodsEmpty, error)
	DeleteGoodsInfo(ctx context.Context, in *GoodsDeleteInfoRequest, opts ...grpc.CallOption) (*GoodsEmpty, error)
	// 商品分类接口
	GetClassifyInfo(ctx context.Context, in *GoodsEmpty, opts ...grpc.CallOption) (*ClassifyListResponse, error)
	GetChildClassifyInfo(ctx context.Context, in *ClassifyChildInfoRequest, opts ...grpc.CallOption) (*ChildClassifyListResponse, error)
	CreateClassifyInfo(ctx context.Context, in *ClassifyCreateInfoRequest, opts ...grpc.CallOption) (*ClassifyInfoResponse, error)
	UpdateClassifyInfo(ctx context.Context, in *ClassifyUpdateInfoRequest, opts ...grpc.CallOption) (*GoodsEmpty, error)
	DeleteClassifyInfo(ctx context.Context, in *ClassifyDeleteInfoRequest, opts ...grpc.CallOption) (*GoodsEmpty, error)
	// 轮播图接口
	GetBannerInfo(ctx context.Context, in *GoodsEmpty, opts ...grpc.CallOption) (*BannerListResponse, error)
	CreateBannerInfo(ctx context.Context, in *BannerCreateInfoRequest, opts ...grpc.CallOption) (*BannerInfoResponse, error)
	UpdateBannerInfo(ctx context.Context, in *BannerCreateInfoRequest, opts ...grpc.CallOption) (*GoodsEmpty, error)
	DeleteBannerInfo(ctx context.Context, in *BannerDeleteInfoRequest, opts ...grpc.CallOption) (*GoodsEmpty, error)
}

type goodsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsServerClient(cc grpc.ClientConnInterface) GoodsServerClient {
	return &goodsServerClient{cc}
}

func (c *goodsServerClient) GetClassifyGoods(ctx context.Context, in *ClassifyGoodsInfoRequest, opts ...grpc.CallOption) (*GoodsListResponse, error) {
	out := new(GoodsListResponse)
	err := c.cc.Invoke(ctx, "/GoodsServer/GetClassifyGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServerClient) BatchGetGoods(ctx context.Context, in *BathGoodsNameInfoRequest, opts ...grpc.CallOption) (*GoodsListResponse, error) {
	out := new(GoodsListResponse)
	err := c.cc.Invoke(ctx, "/GoodsServer/BatchGetGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServerClient) CreateGoodsInfo(ctx context.Context, in *GoodsCreateInfoRequest, opts ...grpc.CallOption) (*GoodsInfoResponse, error) {
	out := new(GoodsInfoResponse)
	err := c.cc.Invoke(ctx, "/GoodsServer/CreateGoodsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServerClient) UpdateGoodsInfo(ctx context.Context, in *GoodsCreateInfoRequest, opts ...grpc.CallOption) (*GoodsEmpty, error) {
	out := new(GoodsEmpty)
	err := c.cc.Invoke(ctx, "/GoodsServer/UpdateGoodsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServerClient) DeleteGoodsInfo(ctx context.Context, in *GoodsDeleteInfoRequest, opts ...grpc.CallOption) (*GoodsEmpty, error) {
	out := new(GoodsEmpty)
	err := c.cc.Invoke(ctx, "/GoodsServer/DeleteGoodsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServerClient) GetClassifyInfo(ctx context.Context, in *GoodsEmpty, opts ...grpc.CallOption) (*ClassifyListResponse, error) {
	out := new(ClassifyListResponse)
	err := c.cc.Invoke(ctx, "/GoodsServer/GetClassifyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServerClient) GetChildClassifyInfo(ctx context.Context, in *ClassifyChildInfoRequest, opts ...grpc.CallOption) (*ChildClassifyListResponse, error) {
	out := new(ChildClassifyListResponse)
	err := c.cc.Invoke(ctx, "/GoodsServer/GetChildClassifyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServerClient) CreateClassifyInfo(ctx context.Context, in *ClassifyCreateInfoRequest, opts ...grpc.CallOption) (*ClassifyInfoResponse, error) {
	out := new(ClassifyInfoResponse)
	err := c.cc.Invoke(ctx, "/GoodsServer/CreateClassifyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServerClient) UpdateClassifyInfo(ctx context.Context, in *ClassifyUpdateInfoRequest, opts ...grpc.CallOption) (*GoodsEmpty, error) {
	out := new(GoodsEmpty)
	err := c.cc.Invoke(ctx, "/GoodsServer/UpdateClassifyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServerClient) DeleteClassifyInfo(ctx context.Context, in *ClassifyDeleteInfoRequest, opts ...grpc.CallOption) (*GoodsEmpty, error) {
	out := new(GoodsEmpty)
	err := c.cc.Invoke(ctx, "/GoodsServer/DeleteClassifyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServerClient) GetBannerInfo(ctx context.Context, in *GoodsEmpty, opts ...grpc.CallOption) (*BannerListResponse, error) {
	out := new(BannerListResponse)
	err := c.cc.Invoke(ctx, "/GoodsServer/GetBannerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServerClient) CreateBannerInfo(ctx context.Context, in *BannerCreateInfoRequest, opts ...grpc.CallOption) (*BannerInfoResponse, error) {
	out := new(BannerInfoResponse)
	err := c.cc.Invoke(ctx, "/GoodsServer/CreateBannerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServerClient) UpdateBannerInfo(ctx context.Context, in *BannerCreateInfoRequest, opts ...grpc.CallOption) (*GoodsEmpty, error) {
	out := new(GoodsEmpty)
	err := c.cc.Invoke(ctx, "/GoodsServer/UpdateBannerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServerClient) DeleteBannerInfo(ctx context.Context, in *BannerDeleteInfoRequest, opts ...grpc.CallOption) (*GoodsEmpty, error) {
	out := new(GoodsEmpty)
	err := c.cc.Invoke(ctx, "/GoodsServer/DeleteBannerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsServerServer is the server API for GoodsServer service.
// All implementations must embed UnimplementedGoodsServerServer
// for forward compatibility
type GoodsServerServer interface {
	// 商品详情接口
	GetClassifyGoods(context.Context, *ClassifyGoodsInfoRequest) (*GoodsListResponse, error)
	BatchGetGoods(context.Context, *BathGoodsNameInfoRequest) (*GoodsListResponse, error)
	CreateGoodsInfo(context.Context, *GoodsCreateInfoRequest) (*GoodsInfoResponse, error)
	UpdateGoodsInfo(context.Context, *GoodsCreateInfoRequest) (*GoodsEmpty, error)
	DeleteGoodsInfo(context.Context, *GoodsDeleteInfoRequest) (*GoodsEmpty, error)
	// 商品分类接口
	GetClassifyInfo(context.Context, *GoodsEmpty) (*ClassifyListResponse, error)
	GetChildClassifyInfo(context.Context, *ClassifyChildInfoRequest) (*ChildClassifyListResponse, error)
	CreateClassifyInfo(context.Context, *ClassifyCreateInfoRequest) (*ClassifyInfoResponse, error)
	UpdateClassifyInfo(context.Context, *ClassifyUpdateInfoRequest) (*GoodsEmpty, error)
	DeleteClassifyInfo(context.Context, *ClassifyDeleteInfoRequest) (*GoodsEmpty, error)
	// 轮播图接口
	GetBannerInfo(context.Context, *GoodsEmpty) (*BannerListResponse, error)
	CreateBannerInfo(context.Context, *BannerCreateInfoRequest) (*BannerInfoResponse, error)
	UpdateBannerInfo(context.Context, *BannerCreateInfoRequest) (*GoodsEmpty, error)
	DeleteBannerInfo(context.Context, *BannerDeleteInfoRequest) (*GoodsEmpty, error)
	mustEmbedUnimplementedGoodsServerServer()
}

// UnimplementedGoodsServerServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsServerServer struct {
}

func (UnimplementedGoodsServerServer) GetClassifyGoods(context.Context, *ClassifyGoodsInfoRequest) (*GoodsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassifyGoods not implemented")
}
func (UnimplementedGoodsServerServer) BatchGetGoods(context.Context, *BathGoodsNameInfoRequest) (*GoodsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetGoods not implemented")
}
func (UnimplementedGoodsServerServer) CreateGoodsInfo(context.Context, *GoodsCreateInfoRequest) (*GoodsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoodsInfo not implemented")
}
func (UnimplementedGoodsServerServer) UpdateGoodsInfo(context.Context, *GoodsCreateInfoRequest) (*GoodsEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoodsInfo not implemented")
}
func (UnimplementedGoodsServerServer) DeleteGoodsInfo(context.Context, *GoodsDeleteInfoRequest) (*GoodsEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoodsInfo not implemented")
}
func (UnimplementedGoodsServerServer) GetClassifyInfo(context.Context, *GoodsEmpty) (*ClassifyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassifyInfo not implemented")
}
func (UnimplementedGoodsServerServer) GetChildClassifyInfo(context.Context, *ClassifyChildInfoRequest) (*ChildClassifyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildClassifyInfo not implemented")
}
func (UnimplementedGoodsServerServer) CreateClassifyInfo(context.Context, *ClassifyCreateInfoRequest) (*ClassifyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClassifyInfo not implemented")
}
func (UnimplementedGoodsServerServer) UpdateClassifyInfo(context.Context, *ClassifyUpdateInfoRequest) (*GoodsEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClassifyInfo not implemented")
}
func (UnimplementedGoodsServerServer) DeleteClassifyInfo(context.Context, *ClassifyDeleteInfoRequest) (*GoodsEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClassifyInfo not implemented")
}
func (UnimplementedGoodsServerServer) GetBannerInfo(context.Context, *GoodsEmpty) (*BannerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBannerInfo not implemented")
}
func (UnimplementedGoodsServerServer) CreateBannerInfo(context.Context, *BannerCreateInfoRequest) (*BannerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBannerInfo not implemented")
}
func (UnimplementedGoodsServerServer) UpdateBannerInfo(context.Context, *BannerCreateInfoRequest) (*GoodsEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBannerInfo not implemented")
}
func (UnimplementedGoodsServerServer) DeleteBannerInfo(context.Context, *BannerDeleteInfoRequest) (*GoodsEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBannerInfo not implemented")
}
func (UnimplementedGoodsServerServer) mustEmbedUnimplementedGoodsServerServer() {}

// UnsafeGoodsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsServerServer will
// result in compilation errors.
type UnsafeGoodsServerServer interface {
	mustEmbedUnimplementedGoodsServerServer()
}

func RegisterGoodsServerServer(s grpc.ServiceRegistrar, srv GoodsServerServer) {
	s.RegisterService(&GoodsServer_ServiceDesc, srv)
}

func _GoodsServer_GetClassifyGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyGoodsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServerServer).GetClassifyGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoodsServer/GetClassifyGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServerServer).GetClassifyGoods(ctx, req.(*ClassifyGoodsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsServer_BatchGetGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BathGoodsNameInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServerServer).BatchGetGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoodsServer/BatchGetGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServerServer).BatchGetGoods(ctx, req.(*BathGoodsNameInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsServer_CreateGoodsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsCreateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServerServer).CreateGoodsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoodsServer/CreateGoodsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServerServer).CreateGoodsInfo(ctx, req.(*GoodsCreateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsServer_UpdateGoodsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsCreateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServerServer).UpdateGoodsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoodsServer/UpdateGoodsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServerServer).UpdateGoodsInfo(ctx, req.(*GoodsCreateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsServer_DeleteGoodsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsDeleteInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServerServer).DeleteGoodsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoodsServer/DeleteGoodsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServerServer).DeleteGoodsInfo(ctx, req.(*GoodsDeleteInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsServer_GetClassifyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServerServer).GetClassifyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoodsServer/GetClassifyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServerServer).GetClassifyInfo(ctx, req.(*GoodsEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsServer_GetChildClassifyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyChildInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServerServer).GetChildClassifyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoodsServer/GetChildClassifyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServerServer).GetChildClassifyInfo(ctx, req.(*ClassifyChildInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsServer_CreateClassifyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyCreateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServerServer).CreateClassifyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoodsServer/CreateClassifyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServerServer).CreateClassifyInfo(ctx, req.(*ClassifyCreateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsServer_UpdateClassifyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyUpdateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServerServer).UpdateClassifyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoodsServer/UpdateClassifyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServerServer).UpdateClassifyInfo(ctx, req.(*ClassifyUpdateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsServer_DeleteClassifyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyDeleteInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServerServer).DeleteClassifyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoodsServer/DeleteClassifyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServerServer).DeleteClassifyInfo(ctx, req.(*ClassifyDeleteInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsServer_GetBannerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServerServer).GetBannerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoodsServer/GetBannerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServerServer).GetBannerInfo(ctx, req.(*GoodsEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsServer_CreateBannerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerCreateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServerServer).CreateBannerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoodsServer/CreateBannerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServerServer).CreateBannerInfo(ctx, req.(*BannerCreateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsServer_UpdateBannerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerCreateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServerServer).UpdateBannerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoodsServer/UpdateBannerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServerServer).UpdateBannerInfo(ctx, req.(*BannerCreateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsServer_DeleteBannerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerDeleteInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServerServer).DeleteBannerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GoodsServer/DeleteBannerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServerServer).DeleteBannerInfo(ctx, req.(*BannerDeleteInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodsServer_ServiceDesc is the grpc.ServiceDesc for GoodsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GoodsServer",
	HandlerType: (*GoodsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClassifyGoods",
			Handler:    _GoodsServer_GetClassifyGoods_Handler,
		},
		{
			MethodName: "BatchGetGoods",
			Handler:    _GoodsServer_BatchGetGoods_Handler,
		},
		{
			MethodName: "CreateGoodsInfo",
			Handler:    _GoodsServer_CreateGoodsInfo_Handler,
		},
		{
			MethodName: "UpdateGoodsInfo",
			Handler:    _GoodsServer_UpdateGoodsInfo_Handler,
		},
		{
			MethodName: "DeleteGoodsInfo",
			Handler:    _GoodsServer_DeleteGoodsInfo_Handler,
		},
		{
			MethodName: "GetClassifyInfo",
			Handler:    _GoodsServer_GetClassifyInfo_Handler,
		},
		{
			MethodName: "GetChildClassifyInfo",
			Handler:    _GoodsServer_GetChildClassifyInfo_Handler,
		},
		{
			MethodName: "CreateClassifyInfo",
			Handler:    _GoodsServer_CreateClassifyInfo_Handler,
		},
		{
			MethodName: "UpdateClassifyInfo",
			Handler:    _GoodsServer_UpdateClassifyInfo_Handler,
		},
		{
			MethodName: "DeleteClassifyInfo",
			Handler:    _GoodsServer_DeleteClassifyInfo_Handler,
		},
		{
			MethodName: "GetBannerInfo",
			Handler:    _GoodsServer_GetBannerInfo_Handler,
		},
		{
			MethodName: "CreateBannerInfo",
			Handler:    _GoodsServer_CreateBannerInfo_Handler,
		},
		{
			MethodName: "UpdateBannerInfo",
			Handler:    _GoodsServer_UpdateBannerInfo_Handler,
		},
		{
			MethodName: "DeleteBannerInfo",
			Handler:    _GoodsServer_DeleteBannerInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods.proto",
}
