// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserSeverClient is the client API for UserSever service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSeverClient interface {
	GetAllUserList(ctx context.Context, in *PageInfo, opts ...grpc.CallOption) (*UserListResponse, error)
	GetUserInfoByMobile(ctx context.Context, in *MobileInfo, opts ...grpc.CallOption) (*UserInfoResponse, error)
	GetUserInfoByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserInfoResponse, error)
	CreateUser(ctx context.Context, in *CreateUserInfo, opts ...grpc.CallOption) (*UserInfoResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserInfo, opts ...grpc.CallOption) (*Empty, error)
	CheckPassword(ctx context.Context, in *PasswordInfo, opts ...grpc.CallOption) (*IsRight, error)
	CheckAuthCode(ctx context.Context, in *AuthCodeInfo, opts ...grpc.CallOption) (*IsRight, error)
	SendAuthCode(ctx context.Context, in *MobileInfo, opts ...grpc.CallOption) (*RandomAuthCodeInfo, error)
}

type userSeverClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSeverClient(cc grpc.ClientConnInterface) UserSeverClient {
	return &userSeverClient{cc}
}

func (c *userSeverClient) GetAllUserList(ctx context.Context, in *PageInfo, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, "/UserSever/GetAllUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSeverClient) GetUserInfoByMobile(ctx context.Context, in *MobileInfo, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, "/UserSever/GetUserInfoByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSeverClient) GetUserInfoByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, "/UserSever/GetUserInfoByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSeverClient) CreateUser(ctx context.Context, in *CreateUserInfo, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, "/UserSever/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSeverClient) UpdateUser(ctx context.Context, in *UpdateUserInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/UserSever/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSeverClient) CheckPassword(ctx context.Context, in *PasswordInfo, opts ...grpc.CallOption) (*IsRight, error) {
	out := new(IsRight)
	err := c.cc.Invoke(ctx, "/UserSever/CheckPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSeverClient) CheckAuthCode(ctx context.Context, in *AuthCodeInfo, opts ...grpc.CallOption) (*IsRight, error) {
	out := new(IsRight)
	err := c.cc.Invoke(ctx, "/UserSever/CheckAuthCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSeverClient) SendAuthCode(ctx context.Context, in *MobileInfo, opts ...grpc.CallOption) (*RandomAuthCodeInfo, error) {
	out := new(RandomAuthCodeInfo)
	err := c.cc.Invoke(ctx, "/UserSever/SendAuthCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSeverServer is the server API for UserSever service.
// All implementations must embed UnimplementedUserSeverServer
// for forward compatibility
type UserSeverServer interface {
	GetAllUserList(context.Context, *PageInfo) (*UserListResponse, error)
	GetUserInfoByMobile(context.Context, *MobileInfo) (*UserInfoResponse, error)
	GetUserInfoByUserID(context.Context, *UserID) (*UserInfoResponse, error)
	CreateUser(context.Context, *CreateUserInfo) (*UserInfoResponse, error)
	UpdateUser(context.Context, *UpdateUserInfo) (*Empty, error)
	CheckPassword(context.Context, *PasswordInfo) (*IsRight, error)
	CheckAuthCode(context.Context, *AuthCodeInfo) (*IsRight, error)
	SendAuthCode(context.Context, *MobileInfo) (*RandomAuthCodeInfo, error)
	mustEmbedUnimplementedUserSeverServer()
}

// UnimplementedUserSeverServer must be embedded to have forward compatible implementations.
type UnimplementedUserSeverServer struct {
}

func (UnimplementedUserSeverServer) GetAllUserList(context.Context, *PageInfo) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserList not implemented")
}
func (UnimplementedUserSeverServer) GetUserInfoByMobile(context.Context, *MobileInfo) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByMobile not implemented")
}
func (UnimplementedUserSeverServer) GetUserInfoByUserID(context.Context, *UserID) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByUserID not implemented")
}
func (UnimplementedUserSeverServer) CreateUser(context.Context, *CreateUserInfo) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserSeverServer) UpdateUser(context.Context, *UpdateUserInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserSeverServer) CheckPassword(context.Context, *PasswordInfo) (*IsRight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPassword not implemented")
}
func (UnimplementedUserSeverServer) CheckAuthCode(context.Context, *AuthCodeInfo) (*IsRight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuthCode not implemented")
}
func (UnimplementedUserSeverServer) SendAuthCode(context.Context, *MobileInfo) (*RandomAuthCodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAuthCode not implemented")
}
func (UnimplementedUserSeverServer) mustEmbedUnimplementedUserSeverServer() {}

// UnsafeUserSeverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSeverServer will
// result in compilation errors.
type UnsafeUserSeverServer interface {
	mustEmbedUnimplementedUserSeverServer()
}

func RegisterUserSeverServer(s grpc.ServiceRegistrar, srv UserSeverServer) {
	s.RegisterService(&UserSever_ServiceDesc, srv)
}

func _UserSever_GetAllUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSeverServer).GetAllUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserSever/GetAllUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSeverServer).GetAllUserList(ctx, req.(*PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSever_GetUserInfoByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MobileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSeverServer).GetUserInfoByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserSever/GetUserInfoByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSeverServer).GetUserInfoByMobile(ctx, req.(*MobileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSever_GetUserInfoByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSeverServer).GetUserInfoByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserSever/GetUserInfoByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSeverServer).GetUserInfoByUserID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSever_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSeverServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserSever/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSeverServer).CreateUser(ctx, req.(*CreateUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSever_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSeverServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserSever/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSeverServer).UpdateUser(ctx, req.(*UpdateUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSever_CheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSeverServer).CheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserSever/CheckPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSeverServer).CheckPassword(ctx, req.(*PasswordInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSever_CheckAuthCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSeverServer).CheckAuthCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserSever/CheckAuthCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSeverServer).CheckAuthCode(ctx, req.(*AuthCodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSever_SendAuthCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MobileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSeverServer).SendAuthCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserSever/SendAuthCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSeverServer).SendAuthCode(ctx, req.(*MobileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// UserSever_ServiceDesc is the grpc.ServiceDesc for UserSever service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSever_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserSever",
	HandlerType: (*UserSeverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllUserList",
			Handler:    _UserSever_GetAllUserList_Handler,
		},
		{
			MethodName: "GetUserInfoByMobile",
			Handler:    _UserSever_GetUserInfoByMobile_Handler,
		},
		{
			MethodName: "GetUserInfoByUserID",
			Handler:    _UserSever_GetUserInfoByUserID_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserSever_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserSever_UpdateUser_Handler,
		},
		{
			MethodName: "CheckPassword",
			Handler:    _UserSever_CheckPassword_Handler,
		},
		{
			MethodName: "CheckAuthCode",
			Handler:    _UserSever_CheckAuthCode_Handler,
		},
		{
			MethodName: "SendAuthCode",
			Handler:    _UserSever_SendAuthCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
